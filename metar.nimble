import strutils

# https://github.com/nim-lang/nimble#nimble-reference

# Include the version number.
include metar/ver

author = "Steve Flenniken"
description = "Metadata Reader for Images"
license = "MIT"
binDir = "bin"

requires "nim >= 0.17.0"

skipExt = @["nim"]
# skipDirs = @["tests", "private"]

task m, "Build and run metar":
  exec "nim c -r --out:bin/metar metar/metar"

# Run all the tests with "nimble test" but it puts binaries in the wrong place.

proc test_module(name: string) =
  const cmd = "nim c --verbosity:0 --hints:off -r --out:bin/$1 tests/$1"
  let source = (cmd % [name])
  exec source

task test, "test":
  # Test each nim file in the tests folder.
  exec "find tests -type f -name \\*.nim -depth 1 | sed 's/tests\\///' | sed 's/.nim//' >testfiles.txt"
  let fileLines = slurp("testfiles.txt")
  for filename in fileLines.splitLines():
    if filename.len > 0:
      # echo filename
      test_module(filename)

task clean, "clean":
  # Delete binary files in the test dir (files with no extension).
  exec "find tests -type f ! -name \"*.*\" | xargs rm"

  # Delete files generated by dot.
  exec "rm -f metar/metar.deps"
  exec "rm -f metar/metar.dot"
  exec "rm -f metar/my.dot"
  exec "rm -f metar/metar.png"
  exec "rm -f testfiles.txt"


proc doc_module(name: string) =
  const cmd = "nim doc --out:docs/$1.html metar/$1.nim"
  let source = cmd % name
  exec source

task docs, "Build all the docs":
  doc_module("metar")
  doc_module("readMetadata")
  doc_module("readerJpeg")
  doc_module("readerDng")
  doc_module("readerTiff")
  doc_module("metadata")
  doc_module("readBytes")

task tree, "Show the directory tree":
  exec "tree -I '*~|nimcache'"

task t, "Build and run t.nim":
  exec "nim c -r --out:bin/t metar/private/t"

task hello, "This is a hello task":
  echo("Hello World!")

task dot, "Show dependency graph":
  exec "nim genDepend metar/metar.nim"
  exec "echo \"digraph metar {\" >metar/my.dot"
  exec "find metar -name \\*.nim -depth 1 | sed \"s/metar\\///\" | sed 's/.nim/ [color = red]/' >>metar/my.dot"
  exec "echo \"version -> ver [style = dotted]\" >>metar/my.dot"
  exec "echo \"metar -> ver [style = dotted]\" >>metar/my.dot"
  exec "tail -n +2 metar/metar.dot >>metar/my.dot"
  exec "dot -Tsvg metar/my.dot -o bin/dependencies.svg"
  exec "open bin/dependencies.svg"

  # You can set the border color like this:
  # macros [color = red];
  # strutils [color = red];
  # json [color = red];
  # tables [color = red];
  # parseopt2 [color = red];

  # Set the line color to blue:
  # abc -> def [color = blue]

  # Set the arrowhead shape:
  # abc -> def [arrowhead = diamond]

  # find all files in the project and set their color blue.
  # find metar -name \*.nim -depth 1 | sed 's%metar/%%' | sed 's/.nim/ [color blue]/'

  # Make a dotted line.
  # version -> ver [style = dotted]
  # metar -> ver [style = dotted]
